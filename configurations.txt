[✓]Configurações 
  [✓]Instalar projeto create-react-app dog 
  [✓]Baixar dependencia history react-router-dom 
  [✓]Limpeza arquivos da pasta dogs (create-react-app) 
  [✓] Criação de .vscode para esconder arquivos

[✓] Inicializar git 
  [✓]Criar repositorio remoto 
  [✓]Vincular repositorio local ao remoto
  [✓]Commit inicial do projeto 

[✓]Rodar app `yarn start`

[✓]API 
  [✓]UserPost 
  [✓]TokenPost 
  [✓]PhotoPost 
  [✓]PhotoGet

[✓]Estrutura inicial
[✓]Header
[✓]Login Routes
  [✓] Create template of Components: LoginForm LoginCreate, LoginPassword, LoginPasswordReset
  [✓] Vinculated route '/' in <App /> to Login
  [✓] access routes of components login in the internal component Login e não no <App />
[✓]Form Component
  [✓] Create input Component and module.css
  [✓] Create button component and module.css
  [✓] Create Component LoginForm with use the components Input and Button
[✓]useForm
  [✓] Transfer value, useValue and onChange for useForm
  [✓] Create validate with regex for verify email and null fields
  [✓] Use validate in onblur, onChange
  [✓] Error implementation tag signaling an error on the screen through the function performed validate
[✓]Api Fectch
  [✓] Create function TOKEN_POST for to use fetch with 2 arguments URL, options (body)
  [✓] Save token from fetch in localstorage
  [✓] Create function USER_GET for to rescue data user from API
  [✓] Use effect for to rescue token from localStorage, else search token from API
[✓]userContext
  [✓] Created UserContext/Provider and included provider in <App />
  [✓] Transferido metodos com uso de fetch (getUser e userLogin) de LoginForm para UserContext
  [✓] Retirado useEffect de LoginForm
  [✓] Export userLogin e data pelo Context.Provider
  [✓] Import userLogin e execução de LoginForm(username, password)
  [✓] Import data e configuração de Header para apresentar conteudo (data) no cabecalho se este existente
[]validade Token
  [✓]useEffect em UserContext para login Automatico, via verificação de token em localStorage
  [✓]Criação de TOKEN_VALIDATE_POST em UserContext para verificar se token esta ativo
  [✓]Tratamento de erro
  [✓] Create method userLogout in UserContext and used in <Header/>
  [✓] Uso de logout se token gravado estiver errado
  [✓] Tratamento de erro na página de loginForm se usuario e senha estiverem errados
  [✓] Desabilitar botão ao realizar login 
  [✓] Utilizando userNavigate para navegar para outra página após login/logout
[✓]Login form
  [✓] Criar animação de entrada da tela de login em css geral
  [✓] Ajustar font de H1 criando className="title" e fazendo import de font-family Spectral
  [✓] criar className title:after com efeito de quadrado ao fundo da fonte 
  [✓] Criação de pasta helper e  component de mensagem de Erro
  [✓] Criação de link Perdeu a senha apontando para rota login/Perdeu
  [✓] Criar LoginForm.module.css, import em LoginForm e estilização de title e subtitulo cadastro

[✓]Login Background
  [✓] Criar Login.module.css
    [✓] .login: Dividir a tela em 2 colunas com grid onde form ocupara uma coluna e background ocupara outra 
    [✓] .login:before: inclusão de imagem em Background
    [✓] .forms: inclusão de margens
    [✓] @media: tela > 640px transformar para 1 coluna e retirar imagem

[]Login Criar
  [✓]Create component LoginCreate default
  [✓]Create section and h1 and class animeLeft e title
  [✓]Create form importando components <Input> e <Button> 
  [✓]Create validate with the strong password to validate password with at least 1 uppercase, 1 lowercase, 1 special characters and a maximum length of 8
  [✓] Inclusão de novo usuario utilizando fetch, criação de nova constante USER_POST(body){url,options}
  [✓] Realizando login após cadastro do novo usuario.
  
[]useFetch
  [✓] Create component useFetch na pasta hooks
  [✓] uso do component em Cadastrar usuario
  [✓] uso de loading e componente <Error> no cadastro
[]Protected route
  [✓] Criar pasta e component User
  [✓] Criar rota Conta em App.js
  [✓] Criar componente ProtectedRoute para verificar login protegido 
  [✓] Criar rota protegida, so se estiver logado ve
  [✓] Setando login como false em UserContext. Acesso a rota protegida so acontece logado 
[]User Header
  [✓] Criação de pasta e component Feed
  [✓] Criação de rotas em User 
  [✓] Criar components vinculando a rota em User
    [✓]UserHeader com title
    [✓] Criação de rotas em User 
    [✓] Criação de novas rotas em UserHeaderNav com title e <Navlink> e uso SVG nos links
      [✓]Feed
      [✓]UserPhotoPost
      [✓]UserStats
    [✓]Estilização de botoes
      [✓]Hover, Focus
      [✓]Active
      [✓]Estilização da cor do SVG
    [✓] Estilização para os botoes ficarem ao lado do outro com gap de 1rem
    [✓] Estilização do UserHeader.header para alinhar titulo e botoes em cada extremo da página
    [✓] Uso de effect e useLocation para mudar o nome do titulo ao clicar no botão

[✓]Mobile menu
  [✓]Create component useMedia para saber o tamanho da tela com window.matchmedia
  [✓]Create Button hamburguer para menu mobile
    [✓] Criação de estado mobileMenuActive para verificar se foi ou nao clicado
    [✓]Criação de itens de submenu para btn mobile
    [✓] Criação de animação de btn mobile ativo ou desativado 
    [✓] quando estado mobile = true mostrar btnMobile e esconder botoes UserMenuNav e mobile = false fazer o contrario
[✓]Foto post
  [✓]Criação de componente
  [✓]Criação de rota em <User >
  [✓]Criação de formulario com <Input />
    [✓]Criação de state com useForm
    [✓]Criação de validate para number
  [✓]Criação de campo file
    [✓]Estilização de campo file
    [✓]Criação de state img e setImg com preview e conteudo
      [✓]Criação de preview com URL.createObjectURL(target.files[0]) 
  [✓]Utilização de grid com 2 colunas  
    [✓] Coluna 1 - Form
    [✓] Coluna 2 - Preview 
  [✓]Estilizaçao do espaço de preview
  [✓]Uso de component <Error error={error}/>
  [✓]Uso de loading ao clicar no <Button/>
  [✓]Uso de effect para encaminhar a rota local com userNavigate
  [✓]Import useFetch para monitorar error, loading, data
    [✓]Enviar dados com request
    [✓]Criado constant PHOTO_POST em api.js para envio de dados a API
    [✓]Envio de dados usando objeto FormatData() e formatData.append(key,value);
[✓]Feed
  [✓] Criação de componente Feed
  [✓] Criação de componente FeedPhoto
    [✓] Componente FeedPhotosItem
    [✓] Utilização de UseFetch em useEffect
    [✓] criação de endpoint PHOTOS_GET em api, passando page, total e user como argumentos queryString
  [✓] Criação de componente FeedPhoto
    [✓] Criação de module.css e estilização
  [✓] Criação de componente FeedPhotoItem
    [✓] Criação de module.css e estilização
      [✓]Display grid com 2 itens por tela em mobile
      [✓]Apresentar quantidade de acesso ao passar o mouse
  [✓✓] Criação de componentes Loading
[✓]Feed Modal 1
  [✓] Criação de componente FeedModal
    [✓] Uso de useFetch para pesquisa de dados
    [✓] Criação de GET_PHOTO em api para pesquisa de dados passando ID_User como argumento
    [✓] Criação de state modal em <Feed>, passando state para componente FeedModal e mostrando-o se estado = true
      [✓]State modal é alterado para true ao se clicar na photo (evento onClick) em <FeedPhotoItem>
    [✓] Import <Erro>
    [✓] Import <Loading>
  [✓] Criação de css FeedModal.module.css
  [✓] Criação de componente <PhotoContent>
  [✓] Criação de css PhotoContent.module.css

[✓]Feed Modal 2
  [✓]Estilização de .modal em FeedModal.module.css
    [✓] position:fixed - Fixar modal na tela
    [✓] width: 100vh / height: 100vh: posicionar o conteudo na largura/altura da tela
    [✓] top:0 / left:0: posicionar o conteudo no inicio do topo a esquerda da janela
    [✓] background: rgba(0,0,0, 0.4) - Escurecer o conteudo para sobressair em relação ao fundo
    [✓] display:flex: centralizar o conteudo na pagina posteriormente
    [✓] z-index:1000 para ficar a frente de qualquer conteudo
    [✓] padding: 2rem calc(4rem+15px) 2rem 4rem: Adicionar uma margem de 2rem no topo e na base e 4rem dos lados, sendo os 15px o espaço do scroll
    [✓] Criação de media query com max-width: 40rem e padding: 2rem calc(2rem+15px) 2rem 2rem
  [✓]Estilização de .photo em PhotoContent.module.css
    [✓] margin: auto - Centralizar o conteudo da foto
    [✓] height:36rem - altura máxima da foto
    [✓] border-radius:.2rem - Arrendondar bordas
    [✓] background:white - Fundo na cor branca
    [✓] display: grid - Será usado grid para dispor os elementos na tela
    [✓] grid-template-colums:36rem e 20rem - grid tera 2 colunas sendo a da esquerda maior
    [✓] grid-template-rows: auto 1fr auto: 3 seções, sendo o topo com conteudo sobre o cão e a base os comentários, essas duas tem tamanho fixo (auto). O conteudo do meio é variavel (1fr) 
    [✓] overflow:hidden - Esconder tudo que esta do lado de fora
  [✓]Criação de animação ao clicar na foto ela espande.
  [✓]Estilização do nome do autor, views 
  [✓]Criação de opção para fechar a tela do modal, clicando no lado de fora, com handleOutsideClick em <FeedModal> verificando se event.target === event.currentTarget, então setModal(null)
[✓]Comentario post - Problema: Permitir a inclusão de comentários em foto para quem esta logado na aplicação
  [✓] Criação de componente PhotoComents
    [✓] Criação de componente PhotoComents.module.css
    [✓] Recebimento de array de comentários, percorrendo este dados via map e passando autor e comentário para PhotoComentsForm
  [✓] Criação de componente PhotoComentsForm
    [✓] Criação de componente PhotoComentsForm.module.css
    [✓]Criação de espaço para recebimento de lista de comentários
    [✓]Criação de caixa de textarea e button para inclusão de novos comentários setComments([...comments, comment]), mantendo os comentários enteriores.



[✓]Foto Delete - Problema: Permitir ao autor, excluir foto, anteriormente publicada
  [✓]Criação de component Delete com Button para exclusão de foto do autor
  [✓]Em UserContent, utilizar useContext para trazer propriedades do usuario, verificando se este é igual ao autor da foto
    [✓]Se foto do autor apresentar botão de excluir foto, senão apresenta nome do autor
  [✓]Criação de rota PHOTO_DELETE recebendo id como parametro e montando estrutura para execução de useFetch
  [✓]Utilização de useFetch para executar a exclusão da foto por id 
  
[✓]Image skeleton - Problema: Apresentar espaço com sombra, até o final do carregamento das imagens
  [✓]Criação de component Image  
    [✓]Criação de componente de estilização Image.module.css
      [✓]Uso de state skeleton para ativar/desativar efeito skeleton
      [✓]Uso <img onLoad={handleLoad}> para apresentar imagem carregada
      [✓]Estilização de classes: .img, .skeleton e .wrapper
    [✓]Uso de <Imagem> em PhotoContent e FeedPhotoItem 

[✓]Loading - Problema: Apresentar tela de carregando, até o final do carregamento das imagens
  [✓]Criação de component Loading  
    [✓]Estilização de componente através de Loading.module.css
    [✓]Copia de arquivo carregar.svg para Loading.js, animando o arquivo em 3 cenas
    [✓]Uso de component em FeedModal e FeedPhotos, antes de carregar as imagens.

[✓]Scroll infinito - Problema: Janela comporta numero limitado de imagens, necessário realizar carregamento de imagens postadas, através de paginação em <FeedPhotos> ou das fotos do autor<PhotoContent>
  [✓] Separando a visualização das fotos postadas pelo autor em <FeedPhotos> e todas as fotos postadas em<Feed>
  [✓] Criação de scroll infinito
    [✓] Refatoração para passagem de nro de page para API dinamicamente
    [✓] Criado array para definir o total de registro, sendo que se o resultado da API trouxer menos do que o total (3 registros), isso significa que é a ultima página.
      [✓] Criação de estado para definir quando é a ultima página, ou não 
    [✓] Verifição do tamanho da janela com o tamanho do scroll para fazer nova requisiçao
    [✓] Implementado espera de 1/2 segundo entre uma chamada de requisição e outra através do scroll, através de variavel wait
    [✓] Criado 2 eventListeners: Um para escutar o movimento do scroll e do botão de rolagem do mouse (wheel) para scrolar tela 


[✓]Foto página - Criação de foto em página unica (view da foto)
  [✓] Criação de rota "foto/:id" em App apontando para <Login>
  [✓] Passagem de parametro single e estilização de CSS se single===true

[✓] Perfil usuario - Página contendo todas as fotos do usuário
  [✓] Criação de UserProfile recebendo user de parametro e passando user para <Feed>
  [✓] Chamada de componente <Feed> passando user como argumento e recebendo fotos de user
  [✓] Criação de rota 'perfil/:user em App.js

[✓]Erro 404
  [✓] Criação de componentes
  [✓] Criação de rota em App
  [✓] Criação de rota em rotas internas. Ex: Login, User

[✓]PropTypes - Usado para tipar os parametros recebidos
  [✓]Import de PropTypes
  [✓]Tipagem de user como string ou id

[✓]Perdeu senha - Form - Criação de formulário para solicitação de reset de senha passando usuario ou email
  [✓] Criação de component LoginPasswordLost
  [✓] Criação de state login com useForm
  [✓] Uso de component useFetch para enviar login para endpoint
  [✓] Criação de PASSWORD_LOST em api.js
  [✓] Tratamento de loading, error, data
  [✓] Tratamento de data apresentando form ou mensagem de envio com sucesso

[✓]Perdeu senha - Link email - Construção de form para alteração de senha através de link acessado por email
  [✓] Criação de component LoginPasswordReset
  [✓] Criação de state password com useForm
  [✓] Resgate de queryParams com URLSearchParams(window.location.search)
  [✓] Criação de states key e login com passagem de parametro
  [✓] Uso de component useFetch para enviar login para endpoint
  [✓] Criação de PASSWORD_RESET em api.js
  [✓] Tratamento de loading, error, 
  [✓] Encaminhamento a página de login após reset de senha
  [✓] Importante: o token de reset é valido para 1 tentativa, se falhar, solicita-se novo reset

[✓]Head - Alterar o cabecalho do browser ao passar de uma página para outra
  [✓] Criação de componente <Head> na pasta Helpers
  [✓] Add de component <Head> com title e descrição nos components:
    [✓]home - Página principal / Feed
    [✓]Login - Pagina de login principal
    [✓]LoginCreate - Página de novo cadastro
    [✓]LoginPasswordLost - Pagina perdeu a senha
    [✓]LoginPasswordReset - Pagina para informar email para senha
    [✓]Photo - Pagina de foto
    [✓]User - Minha conta
    [✓]UserPhotoPost - Pagina de post de fotos
    [✓]UserProfile - Pagina de fotos do usuario
    [✓]UserStats - Pagina de estatistica do usuario

[✓]Footer
  [✓] Create component Footer
  [✓] Estilização Footer
  [✓] Separando tamanho Header, Main e Footer
  
[✓]Bibliteca externa - Carregamento de gráficos através de API externa victory
  [✓] Import biblioteca de grafico victory yarn add victory
  [✓] Criação de componente UserStats
    [✓] Criação de conexao STATS_GET em api
    [✓] Uso de useFetch para carregar {error, loading, data, request}
    [✓] Tratamento de loading no html
    [✓] Inclusão de <Error error={error} />
    [✓] Apresentação de dados se data ===true
  [✓] Criação de componente UserStatsGraphs
    [✓]Criação de states para total de acesso e graph(dados para grafico)
    [✓]Carregamento de dados vindo de API (useFetch)
    [✓]Transformação de dados em array x:title / y:quant. acessos via map
    [✓]Chamada de graficos pizza (VictoryPie) e Barras(VictoryBar)
    [✓]Estilização com inclusão de grid 2 colunas e bordas em cada gráfico
[]Lazy e suspense
[]Ajustes finais
[]Build e hospedagem
